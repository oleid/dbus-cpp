 (c++)"core::dbus::asio::make_executor(std::shared_ptr<core::dbus::Bus> const&)@Base" 0replaceme
 (c++)"core::dbus::Bus::access_signal_router()@Base" 0replaceme
 (c++)"core::dbus::Bus::add_match(core::dbus::MatchRule const&)@Base" 0replaceme
 (c++)"core::dbus::Bus::~Bus()@Base" 0replaceme
 (c++)"core::dbus::Bus::Bus(core::dbus::WellKnownBus)@Base" 0replaceme
 (c++)"core::dbus::Bus::Bus(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0replaceme
 (c++)"core::dbus::Bus::Errors::AlreadyOwned::~AlreadyOwned()@Base" 0replaceme
 (c++)"core::dbus::Bus::Errors::AlreadyOwner::~AlreadyOwner()@Base" 0replaceme
 (c++)"core::dbus::Bus::Errors::NoMemory::~NoMemory()@Base" 0replaceme
 (c++)"core::dbus::Bus::handle_message(std::shared_ptr<core::dbus::Message> const&)@Base" 0replaceme
 (c++)"core::dbus::Bus::has_owner_for_name(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0replaceme
 (c++)"core::dbus::Bus::install_executor(std::shared_ptr<core::dbus::Executor> const&)@Base" 0replaceme
 (c++)"core::dbus::Bus::message_factory()@Base" 0replaceme
 (c++)"core::dbus::Bus::Name::as_string() const@Base" 0replaceme
 (c++)"core::dbus::Bus::Name::Name(core::dbus::Bus::Name&&)@Base" 0replaceme
 (c++)"core::dbus::Bus::Name::Name(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0replaceme
 (c++)"core::dbus::Bus::Name::operator=(core::dbus::Bus::Name&&)@Base" 0replaceme
 (c++)"core::dbus::Bus::raw() const@Base" 0replaceme
 (c++)"core::dbus::Bus::register_object_for_path(core::dbus::types::ObjectPath const&, std::shared_ptr<core::dbus::Object> const&)@Base" 0replaceme
 (c++)"core::dbus::Bus::release_name_on_bus(core::dbus::Bus::Name&&)@Base" 0replaceme
 (c++)"core::dbus::Bus::remove_match(core::dbus::MatchRule const&)@Base" 0replaceme
 (c++)"core::dbus::Bus::request_name_on_bus(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, core::dbus::Bus::RequestNameFlag)@Base" 0replaceme
 (c++)"core::dbus::Bus::run()@Base" 0replaceme
 (c++)"core::dbus::Bus::send(std::shared_ptr<core::dbus::Message> const&)@Base" 0replaceme
 (c++)"core::dbus::Bus::send_with_reply_and_block_for_at_most(std::shared_ptr<core::dbus::Message> const&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&)@Base" 0replaceme
 (c++)"core::dbus::Bus::send_with_reply_and_timeout(std::shared_ptr<core::dbus::Message> const&, std::chrono::duration<long, std::ratio<1l, 1000l> > const&)@Base" 0replaceme
 (c++)"core::dbus::Bus::stop()@Base" 0replaceme
 (c++)"core::dbus::Bus::unregister_object_path(core::dbus::types::ObjectPath const&)@Base" 0replaceme
 (c++)"core::dbus::DBus::DBus(std::shared_ptr<core::dbus::Bus> const&)@Base" 0replaceme
 (c++)"core::dbus::DBus::GetConnectionUnixProcessID::name()::s@Base" 0replaceme
 (c++)"core::dbus::DBus::get_connection_unix_process_id(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 0replaceme
 (c++)"core::dbus::DBus::GetConnectionUnixUser::name()::s@Base" 0replaceme
 (c++)"core::dbus::DBus::get_connection_unix_user(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 0replaceme
 (c++)"core::dbus::DBus::hello() const@Base" 0replaceme
 (c++)"core::dbus::DBus::Hello::name()::s@Base" 0replaceme
 (c++)"core::dbus::DBus::interface()@Base" 0replaceme
 (c++)"core::dbus::DBus::list_names() const@Base" 0replaceme
 (c++)"core::dbus::DBus::ListNames::name()::s@Base" 0replaceme
 (c++)"core::dbus::DBus::make_service_watcher(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, core::dbus::DBus::WatchMode)@Base" 0replaceme
 (c++)"core::dbus::DBus::name()@Base" 0replaceme
 (c++)"core::dbus::DBus::path()@Base" 0replaceme
 (c++)"core::dbus::Error::~Error()@Base" 0replaceme
 (c++)"core::dbus::Error::Error()@Base" 0replaceme
 (c++)"core::dbus::Error::Error(core::dbus::Error&&)@Base" 0replaceme
 (c++)"core::dbus::Error::message() const@Base" 0replaceme
 (c++)"core::dbus::Error::name() const@Base" 0replaceme
 (c++)"core::dbus::Error::operator bool() const@Base" 0replaceme
 (c++)"core::dbus::Error::operator=(core::dbus::Error&&)@Base" 0replaceme
 (c++)"core::dbus::Error::print() const@Base" 0replaceme
 (c++)"core::dbus::Error::raw()@Base" 0replaceme
 (c++)"core::dbus::Fixture::create_connection_to_session_bus()@Base" 0replaceme
 (c++)"core::dbus::Fixture::create_connection_to_system_bus()@Base" 0replaceme
 (c++)"core::dbus::Fixture::default_session_bus_config_file()@Base" 0replaceme
 (c++)"core::dbus::Fixture::default_system_bus_config_file()@Base" 0replaceme
 (c++)"core::dbus::Fixture::~Fixture()@Base" 0replaceme
 (c++)"core::dbus::Fixture::Fixture(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0replaceme
 (c++)"core::dbus::MatchRule::args(std::vector<std::pair<unsigned long, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<unsigned long, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&)@Base" 0replaceme
 (c++)"core::dbus::MatchRule::args(std::vector<std::pair<unsigned long, std::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<unsigned long, std::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&) const@Base" 0replaceme
 (c++)"core::dbus::MatchRule::as_string() const@Base" 0replaceme
 (c++)"core::dbus::MatchRule::interface(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0replaceme
 (c++)"core::dbus::MatchRule::interface(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 0replaceme
 (c++)"core::dbus::MatchRule::~MatchRule()@Base" 0replaceme
 (c++)"core::dbus::MatchRule::MatchRule()@Base" 0replaceme
 (c++)"core::dbus::MatchRule::MatchRule(core::dbus::MatchRule const&)@Base" 0replaceme
 (c++)"core::dbus::MatchRule::member(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0replaceme
 (c++)"core::dbus::MatchRule::member(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 0replaceme
 (c++)"core::dbus::MatchRule::operator=(core::dbus::MatchRule const&)@Base" 0replaceme
 (c++)"core::dbus::MatchRule::path(core::dbus::types::ObjectPath const&)@Base" 0replaceme
 (c++)"core::dbus::MatchRule::path(core::dbus::types::ObjectPath const&) const@Base" 0replaceme
 (c++)"core::dbus::MatchRule::sender(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0replaceme
 (c++)"core::dbus::MatchRule::sender(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 0replaceme
 (c++)"core::dbus::MatchRule::type(core::dbus::Message::Type)@Base" 0replaceme
 (c++)"core::dbus::MatchRule::type(core::dbus::Message::Type) const@Base" 0replaceme
 (c++)"core::dbus::Message::clone()@Base" 0replaceme
 (c++)"core::dbus::Message::destination() const@Base" 0replaceme
 (c++)"core::dbus::Message::ensure_serial_larger_than_zero_for_testing()@Base" 0replaceme
 (c++)"core::dbus::Message::error() const@Base" 0replaceme
 (c++)"core::dbus::Message::expects_reply() const@Base" 0replaceme
 (c++)"core::dbus::Message::from_raw_message(DBusMessage*)@Base" 0replaceme
 (c++)"core::dbus::Message::interface() const@Base" 0replaceme
 (c++)"core::dbus::Message::make_error(std::shared_ptr<core::dbus::Message> const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0replaceme
 (c++)"core::dbus::Message::make_method_call(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, core::dbus::types::ObjectPath const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0replaceme
 (c++)"core::dbus::Message::make_method_return(std::shared_ptr<core::dbus::Message> const&)@Base" 0replaceme
 (c++)"core::dbus::Message::make_signal(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0replaceme
 (c++)"core::dbus::Message::member() const@Base" 0replaceme
 (c++)"core::dbus::Message::~Message()@Base" 0replaceme
 (c++)"core::dbus::Message::Message(std::unique_ptr<core::dbus::Message::Private, std::default_delete<core::dbus::Message::Private> >)@Base" 0replaceme
 (c++)"core::dbus::Message::path() const@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::access_message()@Base" 0replaceme
 (c++)"core::dbus::Message::reader()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::operator=(core::dbus::Message::Reader&&)@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::pop_array()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::pop()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::pop_boolean()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::pop_byte()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::pop_dict_entry()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::pop_floating_point()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::pop_int16()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::pop_int32()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::pop_int64()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::pop_object_path()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::pop_signature()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::pop_string()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::pop_structure()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::pop_uint16()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::pop_uint32()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::pop_uint64()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::pop_unix_fd()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::pop_variant()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::~Reader()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::Reader()@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::Reader(core::dbus::Message::Reader&&)@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::Reader(std::shared_ptr<core::dbus::Message> const&)@Base" 0replaceme
 (c++)"core::dbus::Message::Reader::type() const@Base" 0replaceme
 (c++)"core::dbus::Message::sender() const@Base" 0replaceme
 (c++)"core::dbus::Message::signature() const@Base" 0replaceme
 (c++)"core::dbus::Message::type() const@Base" 0replaceme
 (c++)"core::dbus::Message::writer()@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::close_array(core::dbus::Message::Writer)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::close_dict_entry(core::dbus::Message::Writer)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::close_structure(core::dbus::Message::Writer)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::close_variant(core::dbus::Message::Writer)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::open_array(core::dbus::types::Signature const&)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::open_dict_entry()@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::open_structure()@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::open_variant(core::dbus::types::Signature const&)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::operator=(core::dbus::Message::Writer&&)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::push_boolean(bool)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::push_byte(signed char)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::push_floating_point(double)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::push_int16(short)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::push_int32(int)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::push_int64(long)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::push_object_path(core::dbus::types::ObjectPath const&)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::push_signature(core::dbus::types::Signature const&)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::push_stringn(char const*, unsigned long)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::push_uint16(unsigned short)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::push_uint32(unsigned int)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::push_uint64(unsigned long)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::push_unix_fd(core::dbus::types::UnixFd const&)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::~Writer()@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::Writer(core::dbus::Message::Writer&&)@Base" 0replaceme
 (c++)"core::dbus::Message::Writer::Writer(std::shared_ptr<core::dbus::Message> const&)@Base" 0replaceme
 (c++)"core::dbus::Service::add_match(core::dbus::MatchRule const&)@Base" 0replaceme
 (c++)"core::dbus::Service::add_object_for_path(core::dbus::types::ObjectPath const&)@Base" 0replaceme
 (c++)"core::dbus::Service::get_connection() const@Base" 0replaceme
 (c++)"core::dbus::Service::get_name() const@Base" 0replaceme
 (c++)"core::dbus::Service::is_stub() const@Base" 0replaceme
 (c++)"core::dbus::Service::object_for_path(core::dbus::types::ObjectPath const&)@Base" 0replaceme
 (c++)"core::dbus::Service::remove_match(core::dbus::MatchRule const&)@Base" 0replaceme
 (c++)"core::dbus::Service::root_object()@Base" 0replaceme
 (c++)"core::dbus::Service::~Service()@Base" 0replaceme
 (c++)"core::dbus::Service::Service(std::shared_ptr<core::dbus::Bus> const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0replaceme
 (c++)"core::dbus::Service::Service(std::shared_ptr<core::dbus::Bus> const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, core::dbus::Bus::RequestNameFlag const&)@Base" 0replaceme
 (c++)"core::dbus::Service::use_service_or_throw_if_not_available(std::shared_ptr<core::dbus::Bus> const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0replaceme
 (c++)"core::dbus::Service::use_service(std::shared_ptr<core::dbus::Bus> const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0replaceme
 (c++)"core::dbus::ServiceWatcher::owner_changed() const@Base" 0replaceme
 (c++)"core::dbus::ServiceWatcher::Private::~Private()@Base" 0replaceme
 (c++)"core::dbus::ServiceWatcher::service_registered() const@Base" 0replaceme
 (c++)"core::dbus::ServiceWatcher::service_unregistered() const@Base" 0replaceme
 (c++)"core::dbus::ServiceWatcher::ServiceWatcher(std::shared_ptr<core::dbus::Object>, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, core::dbus::DBus::WatchMode)@Base" 0replaceme
 (c++)"core::dbus::types::ObjectPath::as_string() const@Base" 0replaceme
 (c++)"core::dbus::types::ObjectPath::empty() const@Base" 0replaceme
 (c++)"core::dbus::types::ObjectPath::Errors::InvalidObjectPathStringRepresentation::~InvalidObjectPathStringRepresentation()@Base" 0replaceme
 (c++)"core::dbus::types::ObjectPath::~ObjectPath()@Base" 0replaceme
 (c++)"core::dbus::types::ObjectPath::ObjectPath(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0replaceme
 (c++)"core::dbus::types::ObjectPath::operator<(core::dbus::types::ObjectPath const&) const@Base" 0replaceme
 (c++)"core::dbus::types::ObjectPath::operator==(core::dbus::types::ObjectPath const&) const@Base" 0replaceme
 (c++)"core::dbus::types::ObjectPath::operator!=(core::dbus::types::ObjectPath const&) const@Base" 0replaceme
 (c++)"core::dbus::types::ObjectPath::root()@Base" 0replaceme
 (c++)"core::dbus::types::operator<<(std::basic_ostream<char, std::char_traits<char> >&, core::dbus::types::ObjectPath const&)@Base" 0replaceme
 (c++)"std::hash<core::dbus::types::ObjectPath>::operator()(core::dbus::types::ObjectPath const&) const@Base" 0replaceme
 (c++)"typeinfo for core::dbus::Bus::Errors::AlreadyOwned@Base" 0replaceme
 (c++)"typeinfo for core::dbus::Bus::Errors::AlreadyOwner@Base" 0replaceme
 (c++)"typeinfo for core::dbus::Bus::Errors::NoMemory@Base" 0replaceme
 (c++)"typeinfo for core::dbus::Bus::Private::Private()::{lambda(std::shared_ptr<core::dbus::Message> const&)#1}@Base" 0replaceme
 (c++)"typeinfo for core::dbus::Bus::Private::Private()::{lambda(std::shared_ptr<core::dbus::Message> const&)#2}@Base" 0replaceme
 (c++)"typeinfo for core::dbus::Executor@Base" 0replaceme
 (c++)"typeinfo for core::dbus::Fixture@Base" 0replaceme
 (c++)"typeinfo for core::dbus::Fixture::Private::Session::Session(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::{lambda(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}@Base" 0replaceme
 (c++)"typeinfo for core::dbus::Fixture::Private::System::System(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::{lambda(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}@Base" 0replaceme
 (c++)"typeinfo for core::dbus::PendingCall@Base" 0replaceme
 (c++)"typeinfo for core::dbus::types::ObjectPath::Errors::InvalidObjectPathStringRepresentation@Base" 0replaceme
 (c++)"typeinfo name for core::dbus::Bus::Errors::AlreadyOwned@Base" 0replaceme
 (c++)"typeinfo name for core::dbus::Bus::Errors::AlreadyOwner@Base" 0replaceme
 (c++)"typeinfo name for core::dbus::Bus::Errors::NoMemory@Base" 0replaceme
 (c++)"typeinfo name for core::dbus::Bus::Private::Private()::{lambda(std::shared_ptr<core::dbus::Message> const&)#1}@Base" 0replaceme
 (c++)"typeinfo name for core::dbus::Bus::Private::Private()::{lambda(std::shared_ptr<core::dbus::Message> const&)#2}@Base" 0replaceme
 (c++)"typeinfo name for core::dbus::Executor@Base" 0replaceme
 (c++)"typeinfo name for core::dbus::Fixture@Base" 0replaceme
 (c++)"typeinfo name for core::dbus::Fixture::Private::Session::Session(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::{lambda(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}@Base" 0replaceme
 (c++)"typeinfo name for core::dbus::Fixture::Private::System::System(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::{lambda(std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)#1}@Base" 0replaceme
 (c++)"typeinfo name for core::dbus::Message::Private::Private(DBusMessage*, bool)::{lambda(DBusMessage*)#1}@Base" 0replaceme
 (c++)"typeinfo name for core::dbus::PendingCall@Base" 0replaceme
 (c++)"typeinfo name for core::dbus::types::ObjectPath::Errors::InvalidObjectPathStringRepresentation@Base" 0replaceme
 (c++)"vtable for core::dbus::Bus::Errors::AlreadyOwned@Base" 0replaceme
 (c++)"vtable for core::dbus::Bus::Errors::AlreadyOwner@Base" 0replaceme
 (c++)"vtable for core::dbus::Bus::Errors::NoMemory@Base" 0replaceme
 (c++)"vtable for core::dbus::Executor@Base" 0replaceme
 (c++)"vtable for core::dbus::Fixture@Base" 0replaceme
 (c++)"vtable for core::dbus::PendingCall@Base" 0replaceme
 (c++)"vtable for core::dbus::types::ObjectPath::Errors::InvalidObjectPathStringRepresentation@Base" 0replaceme
#include "libdbus-cpp2.symbols.coverage"